/*实验报告－2
课程名__ 数据结构  实验名称_顺序存储的线性表的简单操作实现
实   验   日   期       年   月   日      实 验 报 告 日 期       年   月   日
姓    名_________学号_____________   
一、实验目的
1、掌握顺序存储的线性表的简单操作
2、理解数据结构中不同存储实现下的头文件（list.h）
二、实验内容
编写一个程序依次实现如下功能：
（1）在第i个元素之前插入一个元素e
（2）删除位序为i的元素，并将删除的节点的值由变量e返回；
（3）由变量e获取位序为i的元素的值；
（4）输出此表；
（5）退出程序时销毁此表。

三、实验环境

四、实验步骤
（描述实验步骤及中间的结果或现象。在实验中做了什么事情，怎么做的，发生的现象和中间结果）

五、实验结果
（提交相关文件）

六、总结
（说明实验过程中遇到的问题及解决办法；个人的收获；未解决的问题等）
*/
#include<stdio.h>
#include<stdlib.h>
#include"ds.h"

#define TRUE          1
#define FALSE         0
#define OK            1
#define ERROR         0
#define INFEASIBLE   -1
#define OVERFLOW     -2
typedef int Status;
typedef int ElemType;

typedef struct LNode{
	ElemType data;
	struct LNode *next;
}LNode,*LinkList;

Status InitList_L(LinkList *pL);
Status ListInsert_L(LinkList *pL,int i,ElemType e);
Status ListDelete_L(LinkList *pL,int i,ElemType *e);
Status GetElem_L(LinkList L,int i,ElemType *e);
void PrintAll(LinkList L);
void DestroyList_L(LinkList L);


void main(void){
	int rc,i;
	char ch;
	ElemType e;
	
	LinkList L;
	InitList_L(&L);
	while(1){
		i=e=0;
		printf("\n=======LinkList=======");
		printf("\n 1--Insert an Element.");
		printf("\n 2--Delete an Element.");
		printf("\n 3--Get    an Element.");
		printf("\n 4--Print All.        ");
		printf("\n 5--Exit.             ");
		printf("\n\nPlease Choose:");
		ch=getchar();
		switch(ch){
		case '1':
			printf("\n**Insert**");
			printf("\nInput i:");
			scanf("%d",&i);
			fflush(stdin);
			printf("Input e:");
			scanf("%d",&e);
			fflush(stdin);
			rc=ListInsert_L(&L,i,e);
			if(rc!=OK)printf("\ni invalid");
			else printf("\ni=%d,e=%d Inserted",i,e);
			break;
		case '2':
			printf("\n**Delete**");
            printf("\nInput i:");
			scanf("%d",&i);
			fflush(stdin);
			rc=ListDelete_L(&L,i,&e);
			if(rc!=OK)printf("\ni invalid");
			else printf("\ni=%d,e=%d Deleted",i,e);
			break;
		case '3':
			printf("\n**Get**");
            printf("\nInput i:");
			scanf("%d",&i);
			fflush(stdin);
			rc=GetElem_L(L,i,&e);
			if(rc!=OK)printf("\ni invalid");
			else printf("\ni=%d,e=%d Geted",i,e);
			break;
		case '4':
			printf("\n**PrintAll**");
            PrintAll(L);
			break;
		case '5':
			DestroyList_L(L);
			exit(0);
		default:
			printf("\nInvalid Choice");
		}
	}
}

Status InitList_L(LinkList *pL){
	*pL=(LinkList)malloc(sizeof(LNode));
	if(*pL==NULL) return ERROR;
	(*pL)->next=NULL;
	return OK;
}

Status ListInsert_L(LinkList *pL,int i,ElemType e){
	LinkList p=*pL,s;
	int j=0;
	while(p!=NULL && j<i-1) 
	{  
		p=p->next; 
		j++;  
	}
	if(p==NULL)return ERROR;
	s=(LinkList)malloc(sizeof(LNode));	
    if(s==NULL)return ERROR;
    s->data=e;
    s->next=p->next;	
	p->next=s;
	return OK;
}

Status ListDelete_L(LinkList *pL,int i,ElemType *e){
	LinkList p,q;
	int j;
	if(i<1 || (*pL)->next==NULL)return ERROR;
	p=*pL; 
	j=0;
    while(p!=NULL && j<i-1)
	{	 p=p->next; 
	     j++;    
	}
	if(p==NULL)return ERROR;
	q=p->next;
	p->next=q->next;	    
	*e=q->data;
	free(q);
	return OK;
}

Status GetElem_L(LinkList L,int i,ElemType *e){
	LinkList p;
	int j;
	if(i<1)return ERROR; 
	p=L->next;  
	j=1;
	while(p!=NULL && j<i){ 
		p=p->next;  
		j++;
	}
	if(p==NULL)return ERROR; 
	*e=p->data;
	return OK;
}

void PrintAll(LinkList L){
	LinkList p;
	p=L->next; 
	while(p!=NULL){
		printf("%d ",p->data); 
		p=p->next;
	}
}

void DestroyList_L(LinkList L){
	free(L);
}
