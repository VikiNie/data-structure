/*实验报告－9
课程名__ 数据结构  实验名称_基于邻接矩阵的图的基本操作 
实   验   日   期       年   月   日      实 验 报 告 日 期       年   月   日
姓    名_________学号_____________   
一、实验目的
通过上机实验实现图的存储表示—邻接矩阵，实现图的遍历算法和最小生成树，最短路径等问题。

二、实验内容
（1）建立带权有向图（如下图）的邻接矩阵。
（2）输出该图从顶点1开始的深度优先遍历序列。
（3）输出该图从顶点1开始的广度优先遍历序列。                      
（4）看成无向图，输出从顶点1开始的最小生成树。（选做）
（5）求顶点1到其它顶点的最短路径。（选做）
 
三、实验环境

四、实验步骤
（描述实验步骤及中间的结果或现象。在实验中做了什么事情，怎么做的，发生的现象和中间结果）

五、实验结果
（相关文件制成压缩文件提交，注明文件名）

六、总结
（说明实验过程中遇到的问题及解决办法；个人的收获；未解决的问题等）
*/

#include <stdio.h>
#include <stdlib.h>

#define TRUE          1
#define FALSE         0
#define OK            1
#define ERROR         0
#define INFEASIBLE   -1
#define OVERFLOW     -2
typedef int Status;
typedef int ElemType;
typedef int QElemType;
typedef int VRType;
typedef int InfoType;
typedef int VertexType;

#define MaxVex        100            //最大顶点数
#define INFINITY    65535        //表示∞
#define TRUE        1
#define    FALSE        0
typedef char        VertexType;    //顶点类型
typedef    int            EdgeType;    //权值类型
typedef int            Bool;
Bool    visited[MaxVex];

typedef struct {
    VertexType    vexs[MaxVex];            //顶点数组
    EdgeType    arc[MaxVex][MaxVex];    //邻接矩阵
    int    numVertexes, numEdges;            //当前图中的结点数以及边数
}MGraph;


//广度优先遍历需要的循环队列
typedef struct {
    int    data[MaxVex];
    int    front, rear;
}Queue;


/****************************************/
//队列的相关操作

//初始化
void InitQueue(Queue *Q)
{
    Q->front = Q->rear = 0;
}

//入队
void EnQueue(Queue *Q, int e)
{
    if ((Q->rear+1)%MaxVex == Q->front)
        return ;

    Q->data[Q->rear] = e;
    Q->rear = (Q->rear+1)%MaxVex;
}

//判空
Bool QueueEmpty(Queue *Q)
{
    if (Q->front == Q->rear)
        return TRUE;
    else
        return FALSE;
}

//出队
void DeQueue(Queue *Q, int *e)
{
    if (Q->front == Q->rear)
        return ;
    
    *e = Q->data[Q->front];
    Q->front = (Q->front+1)%MaxVex;
}
/****************************************/


//建立图的邻接矩阵
void CreateMGraph(MGraph *G)
{
    int i, j, k, w;

    printf("输入顶点数和边数: ");
    scanf("%d%d", &G->numVertexes,&G->numEdges);
    fflush(stdin);

    printf("==============================\n");
    printf("输入各个顶点:\n");
    for (i=0; i<G->numVertexes; ++i)
    {
        printf("顶点%d: ",i+1);
        scanf("%c", &G->vexs[i]);
        fflush(stdin);
    }

    for (i=0; i<G->numVertexes; ++i)
    {
        for (j=0; j<G->numVertexes; ++j)
            G->arc[i][j] = INFINITY;
    }

    printf("==============================\n");
    for (k=0; k<G->numEdges; ++k)
    {
        printf("输入边(vi, vj)中的下标i和j和权W: ");
        scanf("%d%d%d", &i,&j,&w);
        G->arc[i][j] = w;
        G->arc[j][i] = G->arc[i][j];
    }
}


//输出
void DisMGraph(MGraph *G)
{
    int i, j, k;
    k = G->numVertexes;
    for (i=0; i<k; ++i)
    {
        for (j=0; j<k; ++j)
        {
            printf("%5d ", G->arc[i][j]);
        }
        putchar('\n');
    }
}


/****************************************/
//图的深度优先遍历
void DFS(MGraph G, int i)
{
    int j;
    visited[i] = TRUE;
    printf("%c ",    G.vexs[i]);

    for (j=0; j<G.numVertexes; ++j)
    {
        if (G.arc[i][j]!=INFINITY  &&  !visited[j])
            DFS(G, j);
    }
}

void DFSTraverse(MGraph G)
{
    int i;
    for (i=0; i<G.numVertexes; ++i)
        visited[i] = FALSE;

    for (i=0; i<G.numVertexes; ++i)
    {
        if (!visited[i])
            DFS(G, i);
    }

}


//图的广度优先遍历
void BFSTraverse(MGraph *G)
{
    int i, j;
    Queue Q;

    for (i=0; i<G->numVertexes; ++i)
        visited[i] = FALSE;

    InitQueue(&Q);

    for (i=0; i<G->numVertexes; ++i)
    {
        if (!visited[i])
        {
            visited[i] = TRUE;
            printf("%c ", G->vexs[i]);
            EnQueue(&Q, i);

            while (!QueueEmpty(&Q))
            {
                DeQueue(&Q, &i);
                for (j=0; j<G->numVertexes; ++j)
                {
                    if (!visited[j] && G->arc[i][j]!=INFINITY)
                    {
                        visited[j] = TRUE;
                        printf("%c ", G->vexs[j]);
                        EnQueue(&Q, j);
                    }
                }
            }
        }
    }
}
/****************************************/

//程序入口
int main(){
    MGraph G;
	char ch;
	
	while(1){
		printf("\n=======MGraph=======");
		printf("\n 1--构建邻接矩阵");
		printf("\n 2--深度优先遍历");
		printf("\n 3--广度优先遍历");
		printf("\n 4--求最小生成树");
		printf("\n 5--求最短路径 ");
		printf("\n\nPlease Choose:");
		ch=getchar();
		switch(ch){
		case '1':
			fflush(stdin);
			printf("\n**构建邻接矩阵**");
			CreateMGraph(&G);
			break;
		case '2':
			fflush(stdin);
			printf("\n**深度优先遍历**");
			DFSTraverse(G);
            break;
		case '3':
			fflush(stdin);
			printf("\n**广度优先遍历**");
			BFSTraverse(&G);
			break;
			/*
		case '4':
			fflush(stdin);
			printf("\n**求最小生成树**");
			break;
		case '5':
			fflush(stdin);
			printf("\n**求最短路径**");
			break;
		default:
			printf("\nInvalid Choice");
			*/
		}
	}
    printf("\n");
    return 0;
}
