#include<stdio.h>
#include<stdlib.h>
#include"ds.h"

#define TRUE          1
#define FALSE         0
#define OK            1
#define ERROR         0
#define INFEASIBLE   -1
#define OVERFLOW     -2
#define STACK_INIT_SIZE 100
#define STACKINCREMENT   10
typedef int SElemType;
typedef int Status;

typedef struct{
	SElemType *base;
	SElemType *top;
	int stacksize;
}SqStack;

Status InitStack(SqStack *pS);
Status Push(SqStack *pS,SElemType e);
Status Pop(SqStack *pS,SElemType *pe);
Status GetTop(SqStack S,SElemType *pe);
void DestroyStack(SqStack S);

void main(void){
	int rc;
	char ch;
	SElemType e;
	
	SqStack S;
	InitStack(&S);
	while(1){
		e=0;
		printf("\n=======SqList=======");
		printf("\n 1--         Push");
		printf("\n 2--          Pop");
		printf("\n 3--       GetTop");
		printf("\n 4--         Exit");
		printf("\n\nPlease Choose:");
		ch=getchar();
		switch(ch){
		case '1':
			printf("\n**Push**");
			printf("Input e:");
			scanf("%d",&e);
			fflush(stdin);
			rc=Push(&S,e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Inserted",e);
			break;
		case '2':
			printf("\n**Pop**");
			rc=Pop(&S,&e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Deleted",e);
			break;
		case '3':
			printf("\n**GetTop**");
			rc=GetTop(S,&e);
			if(rc!=OK)printf("\n  invalid");
			else printf("\ne=%d Geted",e);
			break;
		case '4':
			DestroyStack(S);
			exit(0);
		default:
			printf("\nInvalid Choice");
		}
	}
}

Status InitStack(SqStack *pS){
	
	(*pS).base=(SElemType *)malloc(STACK_INIT_SIZE * sizeof(SElemType));
	if(!pS->base) exit (OVERFLOW);
	(*pS).top=(*pS).base;
	(*pS).stacksize=STACK_INIT_SIZE;
	return OK;
}

Status Push(SqStack *pS,SElemType e){
	if((*pS).top-(*pS).base>=(*pS).stacksize){
		(*pS).base=(SElemType *)realloc((*pS).base,((*pS).stacksize+STACKINCREMENT)*sizeof(SElemType));
		if(!(*pS).base)exit(OVERFLOW);
		(*pS).top=(*pS).base+(*pS).stacksize;
		(*pS).stacksize+=STACKINCREMENT;
	}
	*(*pS).top++=e;
	return OK;
}

Status Pop(SqStack *pS,SElemType *pe){
	if((*pS).top==(*pS).base)return ERROR;
	*pe= * --(*pS).top;
	return OK;
}

Status GetTop(SqStack S,SElemType *pe){
	if(S.top==S.base) return ERROR;
	*pe= *(S.top-1);
	return OK;
}

void DestroyStack(SqStack S){
	free(S.top);
}
