#include<stdio.h>
#include<stdlib.h>
#include"ds.h"

#define TRUE          1
#define FALSE         0
#define OK            1
#define ERROR         0
#define INFEASIBLE   -1
#define OVERFLOW     -2
typedef int Status;
typedef int QElemType;

typedef struct QNode{
	QElemType      data;
	struct QNode * next;
}QNode,* QueuePtr;
typedef struct{
	QueuePtr front;
	QueuePtr rear;
}LinkQueue;

Status InitQueue(LinkQueue *pQ);
Status EnQueue(LinkQueue *pQ,QElemType e);
Status DeQueue(LinkQueue *pQ,QElemType *pe);
Status GetHead(LinkQueue Q,QElemType *pe);
Status DestroyQueue(LinkQueue *pQ);


void main(void){
	int rc;
	char ch;
	QElemType e;
	
	LinkQueue Q;
	InitQueue(&Q);
	while(1){
		e=0;
		printf("\n=======SqList=======");
		printf("\n 1--EnQueue");
		printf("\n 2--DeQueue");
		printf("\n 3--GetHead");
		printf("\n 4--Exit.");
		printf("\n\nPlease Choose:");
		ch=getchar();
		switch(ch){
		case '1':
			printf("\n**EnQueue**");
			printf("Input e:");
			scanf("%d",&e);
			fflush(stdin);
			rc=EnQueue(&Q,e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Inserted",e);
			break;
		case '2':
			printf("\n**DeQueue**");
			rc=DeQueue(&Q,&e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Deleted",e);
			break;
		case '3':
			printf("\n**GetHead**");
			rc=GetHead(Q,&e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Geted",e);
			break;
		case '4':
			DestroyQueue(&Q);
			exit(0);
		default:
			printf("\nInvalid Choice");
		}
	}
}

Status InitQueue(LinkQueue *pQ){
	(*pQ).front=(*pQ).rear=(QueuePtr)malloc(sizeof(QNode));
	if(!(*pQ).front)exit(OVERFLOW);
	(*pQ).front->next=NULL;
	return OK;
}

Status EnQueue(LinkQueue *pQ,QElemType e){
    QueuePtr p;
	p=(QueuePtr)malloc(sizeof(QNode));
	if(!p)exit(OVERFLOW);
	p->data=e;
	p->next=NULL;
	(*pQ).rear->next=p;
	(*pQ).rear=p;
	return OK;
}

Status DeQueue(LinkQueue *pQ,QElemType *pe){
    QueuePtr p;
	if((*pQ).front==(*pQ).rear)return ERROR;
	p=(*pQ).front->next;
	*pe=p->data;
	(*pQ).front->next=p->next;
	if((*pQ).rear==p)(*pQ).rear=(*pQ).front;
	free(p);
	return OK;
}

Status GetHead(LinkQueue Q,QElemType *pe)
{
	if(Q.front==Q.rear)return ERROR;
	*pe=Q.front->next->data;
	return OK;
}

Status DestroyQueue(LinkQueue *pQ)
{
	while((*pQ).front)
	{
		(*pQ).rear=(*pQ).front->next;
		free((*pQ).front);
		(*pQ).front=(*pQ).rear;
	}
	return OK;
}
