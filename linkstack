#include<stdio.h>
#include<stdlib.h>
#include"ds.h"

#define TRUE          1
#define FALSE         0
#define OK            1
#define ERROR         0
#define INFEASIBLE   -1
#define OVERFLOW     -2
#define STACK_INIT_SIZE 100
#define STACKINCREMENT   10
typedef int ElemType;
typedef int Status;

struct SNode{
	ElemType data;
	struct SNode *next;
};
typedef struct SNode SNode;
typedef SNode * LinkStack;

Status InitStack_L(LinkStack *pS);
Status Push_L(LinkStack *pS,ElemType e);
Status Pop_L(LinkStack *pS,ElemType *pe);
Status GetTop_L(LinkStack S,ElemType *pe);
void DestroyStack_L(LinkStack S);

void main(void){
	int rc;
	char ch;
	ElemType e;
	
	LinkStack S;
	InitStack_L(&S);
	while(1){
		e=0;
		printf("\n=======SqList=======");
		printf("\n 1--         Push");
		printf("\n 2--          Pop");
		printf("\n 3--       GetTop");
		printf("\n 4--         Exit");
		printf("\n\nPlease Choose:");
		ch=getchar();
		switch(ch){
		case '1':
			printf("\n**Push**");
			printf("Input e:");
			scanf("%d",&e);
			fflush(stdin);
			rc=Push_L(&S,e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Inserted",e);
			break;
		case '2':
			printf("\n**Pop**");
			rc=Pop_L(&S,&e);
			if(rc!=OK)printf("\n invalid");
			else printf("\ne=%d Deleted",e);
			break;
		case '3':
			printf("\n**GetTop**");
			rc=GetTop_L(S,&e);
			if(rc!=OK)printf("\n  invalid");
			else printf("\ne=%d Geted",e);
			break;
		case '4':
			DestroyStack_L(S);
			exit(0);
		default:
			printf("\nInvalid Choice");
		}
	}
}

Status InitStack_L(LinkStack *pS){
	
	*pS=(SNode *)malloc(sizeof(SNode));
	if(!(*pS))return ERROR;
	(*pS)->next=NULL;
	return OK;
}

Status Push_L(LinkStack *pS,ElemType e){
	LinkStack p;
	p=(SNode *)malloc(sizeof(SNode));
	if(!p)return ERROR;
	p->data=e;
	p->next=(*pS)->next;
	(*pS)->next=p;
	return OK;
}

Status Pop_L(LinkStack *pS,ElemType *pe){
	LinkStack q;
	if((*pS)->next==NULL)return ERROR;
	(*pe)=(*pS)->next->data;
	q=(*pS)->next;
	(*pS)->next=q->next;
	free(q);
	return OK;
}

Status GetTop_L(LinkStack S,ElemType *pe){
	if(S->next==NULL) return ERROR;
	*pe= S->next->data;
	return OK;
}

void DestroyStack_L(LinkStack S){
	free(S);
}
